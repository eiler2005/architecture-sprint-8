package com.example.reports;

import java.io.*;
import java.net.HttpURLConnection;
import java.net.URL;
import java.nio.charset.StandardCharsets;
import org.json.JSONArray;
import org.json.JSONObject;

public class ApiClientTest {
    public static void main(String[] args) {
        try {
            // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω
            String token = KeycloakTokenFetcher.getAccessToken();
            if (token == null || token.isEmpty()) {
                System.err.println("‚ùå Failed to retrieve access token.");
                return;
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω –ª–∏ —Ç–æ–∫–µ–Ω
            if (!isValidJwt(token)) {
                System.err.println("‚ùå Received an invalid JWT token. Please check Keycloak settings.");
                return;
            }

            System.out.println("üîë Access Token: " + token.substring(0, 30) + "..."); // –í—ã–≤–æ–¥ —á–∞—Å—Ç–∏ —Ç–æ–∫–µ–Ω–∞

            // –ó–∞–ø—Ä–æ—Å –∫ API
            URL url = new URL("http://localhost:8000/reports");
            HttpURLConnection connection = (HttpURLConnection) url.openConnection();
            connection.setRequestMethod("GET");
            connection.setRequestProperty("Authorization", "Bearer " + token);
            connection.setRequestProperty("Accept", "application/json");

            int responseCode = connection.getResponseCode();
            if (responseCode == HttpURLConnection.HTTP_OK) {
                String response = readResponse(connection);
                parseAndPrintJson(response);
            } else if (responseCode == HttpURLConnection.HTTP_UNAUTHORIZED) {
                System.err.println("‚ö†Ô∏è Unauthorized (401). The token may be expired or invalid.");
                System.err.println("üîÑ Try logging in again.");
            } else {
                System.err.println("‚ùå GET request failed. Response Code: " + responseCode);
                String errorResponse = readResponse(connection);
                System.err.println("‚ö†Ô∏è Error Response: " + errorResponse);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ JWT —Ç–æ–∫–µ–Ω–∞
    private static boolean isValidJwt(String token) {
        String[] parts = token.split("\\.");
        return parts.length == 3; // JWT —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ —Ç—Ä–µ—Ö —á–∞—Å—Ç–µ–π (header.payload.signature)
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è —á—Ç–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ API
    private static String readResponse(HttpURLConnection connection) throws IOException {
        try (BufferedReader in = new BufferedReader(new InputStreamReader(connection.getInputStream(), StandardCharsets.UTF_8))) {
            StringBuilder response = new StringBuilder();
            String inputLine;
            while ((inputLine = in.readLine()) != null) {
                response.append(inputLine);
            }
            return response.toString();
        }
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ JSON-–æ—Ç–≤–µ—Ç–∞ (–æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –º–∞—Å—Å–∏–≤ –¥–∞–Ω–Ω—ã—Ö)
    private static void parseAndPrintJson(String response) {
        try {
            JSONArray jsonArray = new JSONArray(response);
            System.out.println("‚úÖ Received " + jsonArray.length() + " reports:");

            for (int i = 0; i < jsonArray.length(); i++) {
                JSONObject reportObj = jsonArray.getJSONObject(i);

                System.out.println("\nüìå Report #" + (i + 1));
                System.out.println("üîπ User ID: " + reportObj.getString("user_id"));
                System.out.println("üìÑ Report: " + reportObj.getString("report"));

                if (reportObj.has("timestamp")) {
                    System.out.println("‚è≥ Generated at: " + reportObj.getString("timestamp"));
                }
                if (reportObj.has("status")) {
                    System.out.println("üìä Status: " + reportObj.getString("status"));
                }
            }

        } catch (Exception e) {
            System.err.println("‚ùå Failed to parse JSON response: " + response);
            e.printStackTrace();
        }
    }
}